import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ParseMode, ChatAction
from aiogram.utils.markdown import hbold
from config import TELEGRAM_TOKEN
from gpt_service import GPTService

# Enable logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Initialize bot, dispatcher and GPT service
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
gpt_service = GPTService()

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """Handle /start command"""
    kb = [
        [
            types.KeyboardButton(text="/clear"),
            types.KeyboardButton(text="/history")
        ]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."
    )
    
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {hbold(message.from_user.first_name)}!\n\n"
        "–Ø –±–æ—Ç —Å GPT. –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞\n"
        "/history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"
    )
    
    await message.answer(
        welcome_text,
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )

@dp.message(Command("clear"))
async def cmd_clear(message: Message):
    """Handle /clear command"""
    try:
        gpt_service.clear_history(message.chat.id)
        await message.answer("‚ú® –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!")
    except Exception as e:
        logger.error(f"Error clearing history: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏.")

@dp.message(Command("history"))
async def cmd_history(message: Message):
    """Handle /history command"""
    try:
        history = gpt_service.get_formatted_history(message.chat.id)
        await message.answer(history)
    except Exception as e:
        logger.error(f"Error getting history: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.")

@dp.message()
async def process_message(message: Message):
    """Handle all other messages"""
    try:
        chat_id = message.chat.id
        user_message = message.text

        await bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        
        response = await gpt_service.get_gpt_response(chat_id, user_message)
        
        if response:
            await message.answer(response)
        else:
            await message.answer("üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        
    except Exception as e:
        logger.error(f"Error processing message: {e}")
        error_message = (
            "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –∫–æ–º–∞–Ω–¥–æ–π /clear"
        )
        await message.answer(error_message)

async def main():
    """Main function to start the bot"""
    try:
        logger.info("Starting bot...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Critical error: {e}")
    finally:
        await bot.session.close()

if __name__ == '__main__':
    asyncio.run(main())